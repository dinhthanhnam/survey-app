import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// üü¢ T√¨m question_id t·ª´ question_name
async function getQuestionIdByName(questionName) {
    const question = await prisma.questions.findFirst({
        where: { question_name: questionName },
    });

    return question ? question.id : null;
}

// üü¢ C·∫≠p nh·∫≠t to√†n b·ªô l·ª±a ch·ªçn c·ªßa m·ªôt c√¢u h·ªèi theo question_name
async function updateAllOptionsForQuestionName(questionName, updatedOptions) {
    try {
        const questionId = await getQuestionIdByName(questionName);
        if (!questionId) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi: ${questionName}`);
            return;
        }

        for (const option of updatedOptions) {
            await prisma.question_options.updateMany({
                where: {
                    question_id: questionId,
                    option_value: option.option_value,
                },
                data: {
                    option_text: option.option_text,
                    option_note: option.option_note || null,
                },
            });

            console.log(
                `‚úÖ L·ª±a ch·ªçn v·ªõi option_value ${option.option_value} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t cho c√¢u h·ªèi: ${questionName}`
            );
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t c√°c l·ª±a ch·ªçn:', error);
    }
}

// üü¢ C·∫≠p nh·∫≠t c√°c l·ª±a ch·ªçn cho c√¢u 6.1
async function updateOptionsForQuestion61() {
    await updateAllOptionsForQuestionName('C√¢u 6.1', [
        {
            option_value: 1,
            option_text: 'Ch∆∞a tri·ªÉn khai cung ·ª©ng s·∫£n ph·∫©m/d·ªãch v·ª• ng√¢n h√†ng s·ªë',
            option_note: null,
        },
        {
            option_value: 2,
            option_text: 'Cung ·ª©ng s·∫£n ph·∫©m/d·ªãch v·ª• ng√¢n h√†ng s·ªë cho Ng√¢n h√†ng H·ª£p t√°c x√£ (NHHTX)',
            option_note: null,
        },
        {
            option_value: 3,
            option_text: 'Cung ·ª©ng s·∫£n ph·∫©m/d·ªãch v·ª• ng√¢n h√†ng s·ªë cho c√°c T·ªï ch·ª©c t√≠n d·ª•ng kh√°c v√† c√¥ng ty Fintech',
            option_note: null,
        },
        {
            option_value: 4,
            option_text: 'T·ª± cung ·ª©ng s·∫£n ph·∫©m/d·ªãch v·ª• ng√¢n h√†ng s·ªë qua ·ª©ng d·ª•ng ri√™ng c·ªßa Qu·ªπ',
            option_note: null,
        },
        {
            option_value: 5,
            option_text: 'T·ª± tri·ªÉn khai d·ªãch v·ª• ng√¢n h√†ng s·ªë v√† h·ª£p t√°c v·ªõi c√°c T·ªï ch·ª©c t√≠n d·ª•ng kh√°c ƒë·ªÉ cung ·ª©ng d·ªãch v·ª•',
            option_note: null,
        },
    ]);
}

// üèÉ‚Äç‚ôÇÔ∏è Ch·∫°y script
async function main() {
    try {
        await updateOptionsForQuestion61();
        console.log('‚úÖ Ho√†n t·∫•t c·∫≠p nh·∫≠t c√¢u h·ªèi 6.1');
    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh th·ª±c thi:', error);
    } finally {
        await prisma.$disconnect();
    }
}

main();