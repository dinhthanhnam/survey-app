generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model question_survey {
  id          Int       @id @default(autoincrement())
  survey_id   Int
  question_id Int
  surveys     surveys   @relation(fields: [survey_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "question_survey_ibfk_1")
  questions   questions @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "question_survey_ibfk_2")

  @@index([question_id], map: "question_id")
  @@index([survey_id], map: "survey_id")
}

model survey_pillars {
  id                  Int         @id @default(autoincrement())
  name                String      @db.VarChar(255)
  weighted_percentage Float?
  questions           questions[]
  survey_id           Int
  survey              surveys     @relation(fields: [survey_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pillar_ibfk_1")
}

model questions {
  id                  Int                     @id @default(autoincrement())
  question_name       String                  @db.VarChar(255)
  question_text       String                  @db.Text
  question_note       String?                 @db.Text
  question_type       questions_question_type
  question_target     Json?
  question_group      question_group[]
  question_options    question_options[]
  question_survey     question_survey[]
  responses           responses[]
  parent_id           Int?
  belongs_to_pillar   Int?
  survey_pillar       survey_pillars?         @relation(fields: [belongs_to_pillar], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "questions_ibfk_1")
  weighted_percentage Float?
}

model respondents {
  id                  Int                          @id @default(autoincrement())
  name                String                       @db.VarChar(255)
  email               String                       @db.VarChar(255)
  phone               String                       @db.VarChar(255)
  auth_status         String                       @db.VarChar(255)
  institution_id      Int
  belong_to_group     respondents_belong_to_group?
  institutions        institutions                 @relation(fields: [institution_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "respondents_ibfk_1")
  responses           responses[]
  respondent_duration respondent_duration[]
  submission_status   String?                      @db.VarChar(255)

  @@index([institution_id], map: "institution_id")
}

model surveys {
  id                 Int               @id @default(autoincrement())
  survey_title       String            @db.Text
  survey_description String?           @db.Text
  question_survey    question_survey[]
  survey_pillars     survey_pillars[]
}

model question_options {
  id             Int         @id @default(autoincrement())
  question_id    Int
  option_text    String      @db.VarChar(255)
  option_value   Int?
  require_reason Int
  option_note    String?     @db.VarChar(255)
  questions      questions   @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "question_options_ibfk_1")
  responses      responses[]
  weighted_value Float?

  @@index([question_id], map: "question_id")
}

model responses {
  id                     Int                        @id @default(autoincrement())
  question_id            Int
  respondent_id          Int
  question_option_id     Int
  question_option_answer String?                    @db.Text
  response_status        responses_response_status?
  updated_at             DateTime                   @default(now())
  question_options       question_options           @relation(fields: [question_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_response_question_option")
  questions              questions                  @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "responses_ibfk_1")
  respondents            respondents                @relation(fields: [respondent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "responses_ibfk_2")

  @@index([question_id], map: "question_id")
  @@index([respondent_id], map: "respondent_id")
  @@index([question_option_id], map: "fk_response_question_option")
}

model question_group {
  id          Int       @id @default(autoincrement())
  question_id Int
  questions   questions @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "question_group_ibfk_1")

  @@index([question_id], map: "question_id")
}

model institutions {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  identity_code String        @unique(map: "identity_code") @db.VarChar(255)
  respondents   respondents[]
}

model otptoken {
  id        Int      @id @default(autoincrement())
  email     String
  otpHash   String
  expiresAt DateTime
}

model respondent_duration {
  id             Int @id @default(autoincrement())
  respondent_id  Int
  total_duration Int

  respondents respondents @relation(fields: [respondent_id], references: [id])

  @@index([respondent_id])
}

enum questions_question_type {
  text
  radiogroup
  checkbox
  dropdown
  rating
  boolean
  date
  datetime
  file
  group
}

enum respondents_belong_to_group {
  Leader  @map("Lãnh đạo & Quản lý")
  Officer @map("Cán bộ nghiệp vụ")
  ITSup   @map("Nhân viên CNTT & Hỗ trợ kỹ thuật")
}

enum responses_response_status {
  saved
  submitted
}
